#!/usr/bin/env python3

import os
import sys
import string
import argparse
import subprocess


platforms = ['atmega8',
             'atmega168',
             'atmega328',
             'bt328',
             'bt',
             'diecimila',
             'esplora',
             'ethernet',
             'fio',
             'leonardo',
             'lilypad',
             'lilypad328',
             'LilyPadUSB',
             'mega',
             'mega2560',
             'micro',
             'mini',
             'mini328',
             'nano',
             'nano328',
             'pro',
             'pro328',
             'pro5v',
             'pro5v328',
             'uno']


def guess_os_name():
    return subprocess.getoutput('uname').strip()


def git_hash():
    """Return first four characters of the hash"""
    hash = subprocess.getoutput('git rev-parse --short HEAD')
    return hash[:4]


if __name__ == '__main__':
    parser = argparse.ArgumentParser() 

    parser.add_argument('board', choices=platforms, help="Name of the board")
    parser.add_argument('--with-lcd5110', action='store_true',
                        help="Enable LCD5110")
    parser.add_argument('--with-ntc', action='store_true',
                        help="Enable NTC temperature sensor")
    parser.add_argument('--with-ds18b20', action='store_true',
                        help="Enable DS18B20 temperature sensor")
    parser.add_argument('--with-kalman', action='store_true',
                        help="Enable Kalman Library")
    parser.add_argument('--with-buttons', action='store_true', help="Physical buttons available")
    parser.add_argument('--debug-serial', action='store_true', help="Debug serial")
    parser.add_argument('--debug-states', action='store_true', help="Debug state machine")
    parser.add_argument('--debug-ds18b20', action='store_true', help="Debug DS18B20")
    parser.add_argument('--arduinomk-dir',
                        action='store', help="Path to Arduino Makefile directory",
                        metavar="PATH", default=None)

    args = parser.parse_args()

    if args.debug_ds18b20 and not args.with_ds18b20:
        parser.error("Cannot use --debug-ds18b20 without --with-ds18b20")

    os_name = guess_os_name()

    if os_name == 'Linux':
        ARDUINO_DIR = '/usr/share/arduino'
        ARDMK_DIR = '/usr' if args.arduinomk_dir is None else args.arduinomk_dir
        AVR_TOOLS_DIR = '/usr'
        AVRDUDE_CONF = '/etc/avrdude.conf'
    elif os_name == 'Darwin':
        ARDUINO_DIR = '/Applications/Arduino.app/Contents/Java'
        ARDMK_DIR = '/usr/local' if args.arduinomk_dir is None else args.arduinomk_dir
        AVR_TOOLS_DIR = ''
        AVRDUDE_CONF = f'{ARDUINO_DIR}/hardware/tools/avr/etc/avrdude.conf'
    else:
        sys.exit("Unknown operating system")

    USER_LIB_PATH = os.path.abspath('../libraries')
    ARDUINO_LIBS = ['crc']

    ARDMK_LOCATION = ARDUINO_DIR if args.arduinomk_dir is None else os.path.join(args.arduinomk_dir, "Arduino.mk")
    config = ""

    if args.with_ntc:
        config += "#define WITH_NTC     1\n"
        ARDUINO_LIBS.append('ntc')

    if args.with_lcd5110:
        config += "#define WITH_LCD5110 1\n"
        ARDUINO_LIBS.append('LCD5110_Basic')

    if args.with_ds18b20:
        config += "#define WITH_DS18B20 1\n"
        ARDUINO_LIBS.append('OneWire')
        ARDUINO_LIBS.append('DallasTemperature')

    if args.with_kalman:
        config += "#define WITH_KALMAN 1\n"
        ARDUINO_LIBS.append('MatrixMath')
        ARDUINO_LIBS.append('TempKalman')

    if args.debug_ds18b20:
        config += "#define DEBUG_DS18B20 1\n"

    if args.debug_serial:
        config += "#define DEBUG_SERIAL 1\n"

    if args.debug_states:
        config += "#define DEBUG_STATES 1\n"

    config += f"#define GIT_COMMIT_HASH \"{git_hash()}\"\n"

    with open('Makefile', 'w') as f:
        template = string.Template(open('Makefile.in').read())
        d = dict(ARDUINO_DIR=ARDUINO_DIR,
                 ARDUINO_LIBS=' '.join(ARDUINO_LIBS),
                 ARDMK_DIR=ARDMK_DIR,
                 AVR_TOOLS_DIR=AVR_TOOLS_DIR,
                 AVRDUDE_CONF=AVRDUDE_CONF,
                 BOARD_TAG=args.board,
                 ARDMK_LOCATION=ARDMK_LOCATION,
                 USER_LIB_PATH=USER_LIB_PATH)
        f.write(template.safe_substitute(d))

    with open('config.h', 'w') as f:
        f.write(config)
