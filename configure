#!/usr/bin/env python3

import os
import sys
import string
import argparse
import subprocess
from pathlib import Path


platforms = ["nano", "nano328", "uno"]


def git_hash():
    """Return first four characters of the hash"""
    hash = subprocess.getoutput("git rev-parse --short HEAD")
    return hash[:4]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--arduino-dir", type=Path,
            default=Path("/usr/share/arduino"),
            help="Root of the Arduino distribution")
    parser.add_argument("--ardmk-dir", type=Path,
            default=Path("/usr/share/arduino"),
            help="Root of the Arduino distribution")
    parser.add_argument("--avr-tools-dir", type=Path,
            default=Path("/usr"),
            help="Root of the Arduino distribution")
    parser.add_argument("--with-ds18b20", type=int,
            help="Use DS18B20 temperature sensor at the given pin")
    parser.add_argument("board", choices=platforms, help="Name of the board")

    args = parser.parse_args()

    USER_LIB_PATH = Path("./libs").absolute()
    ARDUINO_DIR = args.arduino_dir
    ARDMK_DIR = args.ardmk_dir
    AVR_TOOLS_DIR = args.avr_tools_dir
    AVRDUDE_CONF = Path("/etc/avrdude.conf")
    ARDMK_LOCATION = ARDMK_DIR / "Arduino.mk"
    VERSION_STRING = git_hash()

    ARDUINO_LIBS = []
    CONFIG = []

    if args.with_ds18b20 is not None:
        ARDUINO_LIBS.append("OneWire")
        ARDUINO_LIBS.append("DallasTemperature")
        CONFIG.append("#define WITH_DS18B20 1")
        CONFIG.append(f"#define DS18B20_PIN {args.with_ds18b20}")

    with Path("Makefile").open("w") as f:
        template = string.Template(open("Makefile.in").read())

        d = dict(ARDUINO_DIR=ARDUINO_DIR,
                 ARDUINO_LIBS=" ".join(ARDUINO_LIBS),
                 ARDMK_DIR=ARDMK_DIR,
                 AVR_TOOLS_DIR=AVR_TOOLS_DIR,
                 AVRDUDE_CONF=AVRDUDE_CONF,
                 BOARD_TAG=args.board,
                 ARDMK_LOCATION=ARDMK_LOCATION,
                 USER_LIB_PATH=USER_LIB_PATH)

        f.write(template.safe_substitute(d))

    with Path("config.h").open("w") as f:
        template = string.Template(open("config.h.in").read())
        d = dict(VERSION_STRING=VERSION_STRING)
        f.write(template.safe_substitute(d))
        f.write("\n".join(CONFIG))
        f.write("\n")
