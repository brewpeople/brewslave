#!/usr/bin/env python3

import os
import sys
import string
import argparse
import subprocess
from pathlib import Path


platforms = ["nano", "uno"]


def git_hash():
    """Return first four characters of the hash"""
    hash = subprocess.getoutput("git rev-parse --short HEAD")
    return hash[:4]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--arduino-dir", type=Path,
            default=Path("/usr/share/arduino"),
            help="Root of the Arduino distribution")
    parser.add_argument("--ardmk-dir", type=Path,
            default=Path("./libs/Arduino-Makefile").absolute(),
            help="Path to the location of Arduino.mk")
    parser.add_argument("--avr-tools-dir", type=Path,
            default=Path("/usr"),
            help="Path to the AVR tools directory")
    parser.add_argument("--user-lib-path", type=Path,
            default=Path("./libs").absolute(),
            help="Path to the user libs dir")
    parser.add_argument("--with-ds18b20", type=int,
            help="Use DS18B20 temperature sensor at the given pin")
    parser.add_argument("board", choices=platforms, help="Name of the board")

    args = parser.parse_args()

    AVRDUDE_CONF = Path("/etc/avrdude.conf")
    VERSION_STRING = git_hash()
    BOARD_SUB = "atmega328" if args.board == "nano" else ""

    ARDUINO_LIBS = []
    CONFIG = []

    if args.with_ds18b20 is not None:
        ARDUINO_LIBS.append("OneWire")
        ARDUINO_LIBS.append("DallasTemperature")
        CONFIG.append("#define WITH_DS18B20 1")
        CONFIG.append(f"#define DS18B20_PIN {args.with_ds18b20}")

    with Path("Makefile").open("w") as f:
        template = string.Template(open("Makefile.in").read())

        d = dict(ARDUINO_DIR=args.arduino_dir,
                 ARDUINO_LIBS=" ".join(ARDUINO_LIBS),
                 ARDMK_DIR=args.ardmk_dir,
                 AVR_TOOLS_DIR=args.avr_tools_dir,
                 AVRDUDE_CONF=AVRDUDE_CONF,
                 BOARD_TAG=args.board,
                 BOARD_SUB=BOARD_SUB,
                 ARDMK_LOCATION=args.ardmk_dir / "Arduino.mk",
                 USER_LIB_PATH=args.user_lib_path)

        f.write(template.safe_substitute(d))

    with Path("config.h").open("w") as f:
        template = string.Template(open("config.h.in").read())
        d = dict(VERSION_STRING=VERSION_STRING)
        f.write(template.safe_substitute(d))
        f.write("\n".join(CONFIG))
        f.write("\n")
